"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var DrupalMarkdownNodes = ["paragraph__markdown"];

exports.onCreateNode = function (_ref) {
  var node = _ref.node,
      createNodeId = _ref.createNodeId,
      createContentDigest = _ref.createContentDigest,
      actions = _ref.actions;

  if (node.internal.owner !== "gatsby-source-drupal" || !DrupalMarkdownNodes.includes(node.internal.type)) {
    return {};
  }

  var createNode = actions.createNode,
      createNodeField = actions.createNodeField,
      createParentChildLink = actions.createParentChildLink;

  switch (node.internal.type) {
    case "paragraph__markdown":
      // generate MarkdownRemark and PaneFragment
      var markdownNode = {
        id: createNodeId("".concat(node.id, " MarkdownRemark")),
        parent: node === null || node === void 0 ? void 0 : node.id,
        children: [],
        internal: {
          type: "PaneFragment",
          mediaType: "text/markdown",
          content: node === null || node === void 0 ? void 0 : node.field_markdown_body
        }
      };
      markdownNode.frontmatter = {
        title: node === null || node === void 0 ? void 0 : node.field_alt_description,
        id: node === null || node === void 0 ? void 0 : node.id
      };
      markdownNode.internal.contentDigest = createContentDigest(markdownNode);
      createNode(markdownNode);
      createParentChildLink({
        parent: node,
        child: markdownNode
      });
      return markdownNode;
  }
};

exports.createSchemaCustomization = function (_ref2) {
  var actions = _ref2.actions;
  var createTypes = actions.createTypes;
  var typeDefs = "\n  type node__story_fragment implements Node {\n    title: String\n    field_slug: String\n    relationships: node__story_fragmentRelationships\n    field_menu: node__story_fragmentField_menu\n    field_panes: [node__story_fragmentField_panes]\n    field_tract_stack: node__story_fragmentField_tract_stack\n  }\n  type node__story_fragmentField_menu {\n    drupal_internal__target_id: Int\n  }\n  type node__story_fragmentField_panes {\n    drupal_internal__target_id: Int\n  }\n  type node__story_fragmentField_tract_stack {\n    drupal_internal__target_id: Int\n  }\n\n  type node__story_fragmentRelationships {\n    field_menu: node__menu @link(by: \"id\", from: \"field_menu___NODE\")\n    field_panes: [node__pane] @link(by: \"id\", from: \"field_panes___NODE\")\n    field_tract_stack: node__tractstack @link(by: \"id\", from: \"field_tract_stack___NODE\")\n    node__tractstack: [node__tractstack] @link(by: \"id\", from: \"node__tractstack___NODE\")\n  }\n\n  type node__tractstack implements Node {\n    field_slug: String\n    relationships: node__tractstackRelationships\n    field_story_fragments: [node__tractstackField_story_fragments]\n  }\n\n  type node__pane implements Node {\n    title: String\n    field_height_offset_desktop: Int\n    field_height_offset_mobile: Int\n    field_height_offset_tablet: Int\n    field_height_ratio_desktop: String\n    field_height_ratio_mobile: String\n    field_height_ratio_tablet: String\n    field_options: String\n    field_slug: String\n    relationships: node__paneRelationships\n    field_pane_fragments: [node__paneField_pane_fragments]\n  }\n\n  type node__menu implements Node {\n    field_image_logo: node__menuField_image_logo\n    field_svg_logo: node__menuField_svg_logo\n    field_options: String\n    field_pixel_height_desktop: Int\n    field_pixel_height_mobile: Int\n    field_pixel_height_tablet: Int\n    field_theme: String\n    relationships: node__menuRelationships\n    field_menu_items: [node__menuField_menu_items]\n }\n  type node__menuRelationships {\n    field_image_logo: file__file @link(by: \"id\", from: \"field_image_logo___NODE\")\n    field_svg_logo: file__file @link(by: \"id\", from: \"field_svg_logo___NODE\")\n    field_menu_items: [paragraph__menu_item] @link(by: \"id\", from: \"field_menu_items___NODE\")\n    node__story_fragment: [node__story_fragment] @link(by: \"id\", from: \"node__story_fragment___NODE\")\n  }\n  type node__menuField_image_logo {\n    display: Boolean\n    description: String\n    drupal_internal__target_id: Int\n  }\n  type node__menuField_svg_logo {\n    display: Boolean\n    description: String\n    drupal_internal__target_id: Int\n  }\n  type paragraph__menu_item implements Node {\n    field_level: Int\n    field_options: String\n    field_slug: String\n    field_title: String\n    relationships: paragraph__menu_itemRelationships\n  }\n  type paragraph__menu_itemRelationships {\n    node__menu: [node__menu] @link(by: \"id\", from: \"node__menu___NODE\")\n  }\n  type node__menuField_menu_items {\n    target_revision_id: Int\n    drupal_internal__target_id: Int\n  }\n\n  type node__tractstackRelationships {\n    field_story_fragments: [node__story_fragment] @link(by: \"id\", from: \"field_story_fragments___NODE\")\n    node__story_fragment: [node__story_fragment] @link(by: \"id\", from: \"node__story_fragment___NODE\")\n  }\n \n  type node__paneRelationships {\n    field_pane_fragments: [paragraph__background_colourparagraph__background_imageparagraph__background_paneparagraph__background_videoparagraph__markdownparagraph__svgUnion] @link(by: \"id\", from: \"field_pane_fragments___NODE\")\n    node__story_fragment: [node__story_fragment] @link(by: \"id\", from: \"node__story_fragment___NODE\")\n  }\n\n  type node__paneField_pane_fragments {\n    drupal_internal__target_id: Int\n  }\n  type node__tractstackField_story_fragments {\n    drupal_internal__target_id: Int\n  }\n\n  union paragraph__background_colourparagraph__background_imageparagraph__background_paneparagraph__background_videoparagraph__markdownparagraph__svgUnion = paragraph__background_colour | paragraph__background_image | paragraph__background_pane | paragraph__background_video | paragraph__markdown | paragraph__svg\n\n  type paragraph__svg implements Node {\n    field_css_styles_parent_desktop: String\n    field_css_styles_parent_mobile: String\n    field_css_styles_parent_tablet: String\n    field_hidden_viewports: String\n    field_image_mask_shape_desktop: String\n    field_image_mask_shape_mobile: String\n    field_image_mask_shape_tablet: String\n    field_options: String\n    field_zindex: Int\n    relationships: paragraph__svgRelationships\n    field_svg_file: paragraph__svgField_svg_file\n  }\n\n  type paragraph__svgRelationships {\n    field_svg_file: file__file @link(by: \"id\", from: \"field_svg_file___NODE\")\n    node__pane: [node__pane] @link(by: \"id\", from: \"node__pane___NODE\")\n  }\n\n  type paragraph__svgField_svg_file {\n    description: String\n    drupal_internal__target_id: Int\n  }\n \n  type file__file implements Node {\n    relationships: file__fileRelationships\n    localFile: File @link(by: \"id\", from: \"localFile___NODE\")\n  }\n\n  type file__fileRelationships {\n    paragraph__markdown: [paragraph__markdown] @link(by: \"id\", from: \"paragraph__markdown___NODE\")\n    paragraph__background_image: [paragraph__background_image] @link(by: \"id\", from: \"paragraph__background_image___NODE\")\n    node__menu: [node__menu] @link(by: \"id\", from: \"node__menu___NODE\")\n    paragraph__svg: [paragraph__svg] @link(by: \"id\", from: \"paragraph__svg___NODE\")\n  }\n\n  type paragraph__markdown implements Node {\n    field_css_styles_desktop: String\n    field_css_styles_mobile: String\n    field_css_styles_parent_desktop: String\n    field_css_styles_parent_mobile: String\n    field_css_styles_parent_tablet: String\n    field_css_styles_tablet: String\n    field_hidden_viewports: String\n    field_image_mask_shape_desktop: String\n    field_image_mask_shape_mobile: String\n    field_image_mask_shape_tablet: String\n    field_markdown_body: String\n    field_modal: Boolean\n    field_options: String\n    field_text_shape_outside_desktop: String\n    field_text_shape_outside_mobile: String\n    field_text_shape_outside_tablet: String\n    field_zindex: Int\n    relationships: paragraph__markdownRelationships\n    field_image: [paragraph__markdownField_image]\n  }\n  type paragraph__markdownRelationships {\n    field_image: [file__file] @link(by: \"id\", from: \"field_image___NODE\")\n    node__pane: [node__pane] @link(by: \"id\", from: \"node__pane___NODE\")\n  }\n  type paragraph__markdownField_image {\n    description: String\n    drupal_internal__target_id: Int\n  }\n\n  type paragraph__background_image implements Node {\n    field_alt_text: String\n    field_background_position: String\n    field_css_styles_parent_desktop: String\n    field_css_styles_parent_mobile: String\n    field_css_styles_parent_tablet: String\n    field_hidden_viewports: String\n    field_image_mask_shape_desktop: String\n    field_image_mask_shape_mobile: String\n    field_image_mask_shape_tablet: String\n    field_options: String\n    field_zindex: Int\n    relationships: paragraph__background_imageRelationships\n    field_image: [paragraph__background_imageField_image]\n  }\n  type paragraph__background_imageRelationships {\n    field_image: [file__file] @link(by: \"id\", from: \"field_image___NODE\")\n    node__pane: [node__pane] @link(by: \"id\", from: \"node__pane___NODE\")\n  }\n  type paragraph__background_imageField_image {\n    description: String\n    drupal_internal__target_id: Int\n  }\n\n  type paragraph__background_video implements Node {\n    field_alt_text: String\n    field_cdn_url: String\n    field_css_styles_parent_desktop: String\n    field_css_styles_parent_mobile: String\n    field_css_styles_parent_tablet: String\n    field_hidden_viewports: String\n    field_image_mask_shape_desktop: String\n    field_image_mask_shape_mobile: String\n    field_image_mask_shape_tablet: String\n    field_options: String\n    field_zindex: Int\n    relationships: paragraph__background_videoRelationships\n  }\n  type paragraph__background_videoRelationships {\n    node__pane: [node__pane] @link(by: \"id\", from: \"node__pane___NODE\")\n  }\n\n  type paragraph__background_pane implements Node {\n    field_css_styles_parent_desktop: String\n    field_css_styles_parent_mobile: String\n    field_css_styles_parent_tablet: String\n    field_hidden_viewports: String\n    field_options: String\n    field_shape_desktop: String\n    field_shape_mobile: String\n    field_shape_tablet: String\n    field_zindex: Int\n    relationships: paragraph__background_paneRelationships\n  }\n  type paragraph__background_paneRelationships {\n    node__pane: [node__pane] @link(by: \"id\", from: \"node__pane___NODE\")\n  }\n\n  type paragraph__background_colour implements Node {\n    field_background_colour: String\n    field_hidden_viewports: String\n    relationships: paragraph__background_colourRelationships\n  }\n  type paragraph__background_colourRelationships {\n    node__pane: [node__pane] @link(by: \"id\", from: \"node__pane___NODE\")\n  }\n\n  type PaneFragment implements Node @childOf(types: [\"paragraph__markdown\"]) {\n    frontmatter: PaneFragmentFrontmatter\n  }\n  type PaneFragmentFrontmatter {\n    id: String\n  }\n  ";
  createTypes(typeDefs);
};

exports.createResolvers = function (_ref3) {
  var createResolvers = _ref3.createResolvers;
  var resolvers = {
    PaneFragment: {
      childMarkdownRemark: {
        type: ["MarkdownRemark"],
        resolve: function () {
          var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source, args, context, info) {
            var _yield$context$nodeMo, entries;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return context.nodeModel.findAll({
                      query: {
                        filter: {
                          htmlAst: {
                            eq: true
                          }
                        }
                      },
                      type: "MarkdownRemark"
                    });

                  case 2:
                    _yield$context$nodeMo = _context.sent;
                    entries = _yield$context$nodeMo.entries;
                    return _context.abrupt("return", entries);

                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function resolve(_x, _x2, _x3, _x4) {
            return _resolve.apply(this, arguments);
          }

          return resolve;
        }()
      }
    }
  };
  createResolvers(resolvers);
};
//# sourceMappingURL=gatsby-node.js.map