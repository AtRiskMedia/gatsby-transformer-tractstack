### Type definitions saved at 2022-07-16T17:23:55.872Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  siteUrl: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["PaneFragment"]) @derivedTypes @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean
  duotone: DuotoneGradient
  rotate: Int
  trim: Float
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat, toFormatBase64: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat
    toFormatBase64: ImageFormat
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int
    trim: Float
    sizes: String

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, base64: Boolean, traceSVG: Potrace, toFormat: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpResize
}

type paragraph__svg implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__id: Int
  drupal_internal__revision_id: Int
  langcode: String
  status: Boolean
  created: Date @dateformat
  parent_id: String
  parent_type: String
  parent_field_name: String
  default_langcode: Boolean
  field_css_styles_parent_desktop: String
  field_css_styles_parent_mobile: String
  field_css_styles_parent_tablet: String
  field_hidden_viewports: String
  field_image_mask_shape_desktop: String
  field_image_mask_shape_mobile: String
  field_image_mask_shape_tablet: String
  field_options: String
  field_zindex: Int
  relationships: paragraph__svgRelationships
  field_svg_file: paragraph__svgField_svg_file
}

type paragraph__svgRelationships {
  field_svg_file: file__file @link(by: "id", from: "field_svg_file___NODE")
  node__pane: [node__pane] @link(by: "id", from: "node__pane___NODE")
}

type file__file implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__fid: Int
  langcode: String
  filename: String
  uri: file__fileUri
  filemime: String
  filesize: Int
  status: Boolean
  created: Date @dateformat
  changed: Date @dateformat
  relationships: file__fileRelationships
  localFile: File @link(by: "id", from: "localFile___NODE")
}

type file__fileUri {
  value: String
  url: String
}

type file__fileRelationships {
  paragraph__markdown: [paragraph__markdown] @link(by: "id", from: "paragraph__markdown___NODE")
  paragraph__background_image: [paragraph__background_image] @link(by: "id", from: "paragraph__background_image___NODE")
  node__menu: [node__menu] @link(by: "id", from: "node__menu___NODE")
  paragraph__svg: [paragraph__svg] @link(by: "id", from: "paragraph__svg___NODE")
}

type paragraph__markdown implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__id: Int
  drupal_internal__revision_id: Int
  langcode: String
  status: Boolean
  created: Date @dateformat
  parent_id: String
  parent_type: String
  parent_field_name: String
  default_langcode: Boolean
  revision_translation_affected: Boolean
  field_css_styles_desktop: String
  field_css_styles_mobile: String
  field_css_styles_parent_desktop: String
  field_css_styles_parent_mobile: String
  field_css_styles_parent_tablet: String
  field_css_styles_tablet: String
  field_hidden_viewports: String
  field_image_mask_shape_desktop: String
  field_image_mask_shape_mobile: String
  field_image_mask_shape_tablet: String
  field_markdown_body: String
  field_modal: Boolean
  field_options: String
  field_text_shape_outside_desktop: String
  field_text_shape_outside_mobile: String
  field_text_shape_outside_tablet: String
  field_zindex: Int
  relationships: paragraph__markdownRelationships
  field_image: [paragraph__markdownField_image]
}

type paragraph__markdownRelationships {
  field_image: [file__file] @link(by: "id", from: "field_image___NODE")
  node__pane: [node__pane] @link(by: "id", from: "node__pane___NODE")
}

type node__pane implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__nid: Int
  drupal_internal__vid: Int
  langcode: String
  revision_timestamp: Date @dateformat
  status: Boolean
  title: String
  created: Date @dateformat
  changed: Date @dateformat
  promote: Boolean
  sticky: Boolean
  default_langcode: Boolean
  revision_translation_affected: Boolean
  path: node__panePath
  field_height_offset_desktop: Int
  field_height_offset_mobile: Int
  field_height_offset_tablet: Int
  field_height_ratio_desktop: String
  field_height_ratio_mobile: String
  field_height_ratio_tablet: String
  field_options: String
  field_slug: String
  relationships: node__paneRelationships
  field_pane_fragments: [node__paneField_pane_fragments]
}

type node__panePath {
  langcode: String
}

type node__paneRelationships {
  field_pane_fragments: [paragraph__background_colourparagraph__background_imageparagraph__background_paneparagraph__background_videoparagraph__markdownparagraph__svgUnion] @link(by: "id", from: "field_pane_fragments___NODE")
  node__story_fragment: [node__story_fragment] @link(by: "id", from: "node__story_fragment___NODE")
}

union paragraph__background_colourparagraph__background_imageparagraph__background_paneparagraph__background_videoparagraph__markdownparagraph__svgUnion = paragraph__background_colour | paragraph__background_image | paragraph__background_pane | paragraph__background_video | paragraph__markdown | paragraph__svg

type node__story_fragment implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__nid: Int
  drupal_internal__vid: Int
  langcode: String
  revision_timestamp: Date @dateformat
  status: Boolean
  title: String
  created: Date @dateformat
  changed: Date @dateformat
  promote: Boolean
  sticky: Boolean
  default_langcode: Boolean
  revision_translation_affected: Boolean
  path: node__story_fragmentPath
  field_slug: String
  relationships: node__story_fragmentRelationships
  field_menu: node__story_fragmentField_menu
  field_panes: [node__story_fragmentField_panes]
  field_tract_stack: node__story_fragmentField_tract_stack
}

type node__story_fragmentPath {
  langcode: String
}

type node__story_fragmentRelationships {
  field_menu: node__menu @link(by: "id", from: "field_menu___NODE")
  field_panes: [node__pane] @link(by: "id", from: "field_panes___NODE")
  field_tract_stack: node__tractstack @link(by: "id", from: "field_tract_stack___NODE")
  node__tractstack: [node__tractstack] @link(by: "id", from: "node__tractstack___NODE")
}

type node__menu implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__nid: Int
  drupal_internal__vid: Int
  langcode: String
  revision_timestamp: Date @dateformat
  status: Boolean
  title: String
  created: Date @dateformat
  changed: Date @dateformat
  promote: Boolean
  sticky: Boolean
  default_langcode: Boolean
  revision_translation_affected: Boolean
  path: node__menuPath
  field_options: String
  field_pixel_height_desktop: Int
  field_pixel_height_mobile: Int
  field_pixel_height_tablet: Int
  field_theme: String
  relationships: node__menuRelationships
  field_image_logo: node__menuField_image_logo
  field_menu_items: [node__menuField_menu_items]
  field_svg_logo: node__menuField_svg_logo
}

type node__menuPath {
  langcode: String
}

type node__menuRelationships {
  field_image_logo: file__file @link(by: "id", from: "field_image_logo___NODE")
  field_menu_items: [paragraph__menu_item] @link(by: "id", from: "field_menu_items___NODE")
  field_svg_logo: file__file @link(by: "id", from: "field_svg_logo___NODE")
  node__story_fragment: [node__story_fragment] @link(by: "id", from: "node__story_fragment___NODE")
}

type paragraph__menu_item implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__id: Int
  drupal_internal__revision_id: Int
  langcode: String
  status: Boolean
  created: Date @dateformat
  parent_id: String
  parent_type: String
  parent_field_name: String
  default_langcode: Boolean
  field_level: Int
  field_options: String
  field_slug: String
  field_title: String
  relationships: paragraph__menu_itemRelationships
}

type paragraph__menu_itemRelationships {
  node__menu: [node__menu] @link(by: "id", from: "node__menu___NODE")
}

type node__menuField_image_logo {
  display: Boolean
  description: String
  drupal_internal__target_id: Int
}

type node__menuField_menu_items {
  target_revision_id: Int
  drupal_internal__target_id: Int
}

type node__menuField_svg_logo {
  display: Boolean
  description: String
  drupal_internal__target_id: Int
}

type node__tractstack implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__nid: Int
  drupal_internal__vid: Int
  langcode: String
  revision_timestamp: Date @dateformat
  status: Boolean
  title: String
  created: Date @dateformat
  changed: Date @dateformat
  promote: Boolean
  sticky: Boolean
  default_langcode: Boolean
  revision_translation_affected: Boolean
  path: node__tractstackPath
  field_slug: String
  relationships: node__tractstackRelationships
  field_story_fragments: [node__tractstackField_story_fragments]
}

type node__tractstackPath {
  langcode: String
}

type node__tractstackRelationships {
  field_story_fragments: [node__story_fragment] @link(by: "id", from: "field_story_fragments___NODE")
  node__story_fragment: [node__story_fragment] @link(by: "id", from: "node__story_fragment___NODE")
}

type node__tractstackField_story_fragments {
  drupal_internal__target_id: Int
}

type node__story_fragmentField_menu {
  drupal_internal__target_id: Int
}

type node__story_fragmentField_panes {
  drupal_internal__target_id: Int
}

type node__story_fragmentField_tract_stack {
  drupal_internal__target_id: Int
}

type node__paneField_pane_fragments {
  target_revision_id: Int
  drupal_internal__target_id: Int
}

type paragraph__markdownField_image {
  display: Boolean
  description: String
  drupal_internal__target_id: Int
}

type paragraph__background_image implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__id: Int
  drupal_internal__revision_id: Int
  langcode: String
  status: Boolean
  created: Date @dateformat
  parent_id: String
  parent_type: String
  parent_field_name: String
  default_langcode: Boolean
  revision_translation_affected: Boolean
  field_alt_text: String
  field_background_position: String
  field_css_styles_parent_desktop: String
  field_css_styles_parent_mobile: String
  field_css_styles_parent_tablet: String
  field_hidden_viewports: String
  field_image_mask_shape_desktop: String
  field_image_mask_shape_mobile: String
  field_image_mask_shape_tablet: String
  field_options: String
  field_zindex: Int
  relationships: paragraph__background_imageRelationships
  field_image: [paragraph__background_imageField_image]
}

type paragraph__background_imageRelationships {
  field_image: [file__file] @link(by: "id", from: "field_image___NODE")
  node__pane: [node__pane] @link(by: "id", from: "node__pane___NODE")
}

type paragraph__background_imageField_image {
  display: Boolean
  description: String
  drupal_internal__target_id: Int
}

type paragraph__svgField_svg_file {
  display: Boolean
  description: String
  drupal_internal__target_id: Int
}

type paragraph__background_video implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__id: Int
  drupal_internal__revision_id: Int
  langcode: String
  status: Boolean
  created: Date @dateformat
  parent_id: String
  parent_type: String
  parent_field_name: String
  default_langcode: Boolean
  field_alt_text: String
  field_cdn_url: String
  field_css_styles_parent_desktop: String
  field_css_styles_parent_mobile: String
  field_css_styles_parent_tablet: String
  field_hidden_viewports: String
  field_image_mask_shape_desktop: String
  field_image_mask_shape_mobile: String
  field_image_mask_shape_tablet: String
  field_options: String
  field_zindex: Int
  relationships: paragraph__background_videoRelationships
}

type paragraph__background_videoRelationships {
  node__pane: [node__pane] @link(by: "id", from: "node__pane___NODE")
}

type paragraph__background_pane implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__id: Int
  drupal_internal__revision_id: Int
  langcode: String
  status: Boolean
  created: Date @dateformat
  parent_id: String
  parent_type: String
  parent_field_name: String
  default_langcode: Boolean
  revision_translation_affected: Boolean
  field_css_styles_parent_desktop: String
  field_css_styles_parent_mobile: String
  field_css_styles_parent_tablet: String
  field_hidden_viewports: String
  field_options: String
  field_shape_desktop: String
  field_shape_mobile: String
  field_shape_tablet: String
  field_zindex: Int
  relationships: paragraph__background_paneRelationships
}

type paragraph__background_paneRelationships {
  node__pane: [node__pane] @link(by: "id", from: "node__pane___NODE")
}

type paragraph__background_colour implements Node @derivedTypes @dontInfer {
  drupal_id: String
  drupal_internal__id: Int
  drupal_internal__revision_id: Int
  langcode: String
  status: Boolean
  created: Date @dateformat
  parent_id: String
  parent_type: String
  parent_field_name: String
  default_langcode: Boolean
  field_background_colour: String
  field_hidden_viewports: String
  relationships: paragraph__background_colourRelationships
}

type paragraph__background_colourRelationships {
  node__pane: [node__pane] @link(by: "id", from: "node__pane___NODE")
}

type PaneFragment implements Node @derivedTypes @childOf(types: ["paragraph__markdown"]) @dontInfer {
  frontmatter: PaneFragmentFrontmatter
}

type PaneFragmentFrontmatter {
  id: String
}
