{"version":3,"sources":["src/helpers.js"],"names":["tagExtractor","content","DomParser","require","tagParser","imageTagsParsed","parseFromString","imageTags","getElementsByTagName","imageTagsProcessed","forEach","imageTag","attributes","imageTagAttrs","inlineImageAttrs","name","imageUrl","value","push","relativePath","remotePath","contentProcessed","processMarkdown","contentRaw","SimpleMarkdown","mdParse","defaultBlockParse","mdOutput","defaultOutput","syntaxTree","console","log","JSON","stringify","module","exports"],"mappings":";;;;;;AACA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAa;AAChC,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,SAAS,GAAG,IAAIF,SAAJ,EAAlB,CAFgC,CAGhC;AACA;;AACA,MAAMG,eAAe,GAAGD,SAAS,CAACE,eAAV,CAA0BL,OAA1B,CAAxB;AACA,MAAMM,SAAS,GAAGF,eAAe,CAACG,oBAAhB,CAAqC,KAArC,CAAlB;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACAA,EAAAA,kBAAkB,CAACC,OAAnB,CAA2B,UAAAC,QAAQ,EAAI;AACnCA,IAAAA,QAAQ,CAACC,UAAT,CAAoBF,OAApB;AAAA,yEAA4B,iBAAOG,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5B,oBAAIC,gBAAgB,CAACC,IAAjB,KAA0B,KAA9B,EAAqC;AAC7BC,kBAAAA,QAD6B,qBACPH,aAAa,CAACI,KADP;AAEnCV,kBAAAA,SAAS,CAACW,IAAV,CAAe;AACbC,oBAAAA,YAAY,EAAEN,aAAa,CAACI,KADf;AAEbG,oBAAAA,UAAU,EAAEJ;AAFC,mBAAf;AAID;;AAP2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA5B;;AAAA;AAAA;AAAA;AAAA;AASH,GAVD;AAYA,SAAO;AACLK,IAAAA,gBAAgB,EAAEpB,OADb;AAELQ,IAAAA,kBAAkB,EAAEA;AAFf,GAAP;AAID,CAxBD;;AA0BA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AACtC,MAAIC,cAAc,GAAGrB,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAIsB,OAAO,GAAGD,cAAc,CAACE,iBAA7B;AACA,MAAIC,QAAQ,GAAGH,cAAc,CAACI,aAA9B;AACA,MAAIC,UAAU,GAAGJ,OAAO,CAACF,UAAD,CAAxB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAAZ;AACA,SAAOF,QAAQ,CAACE,UAAD,CAAf;AACD,CAPD;;AASAK,MAAM,CAACC,OAAP,GAAiB;AACfnC,EAAAA,YAAY,EAAZA,YADe;AAEfsB,EAAAA,eAAe,EAAfA;AAFe,CAAjB","sourcesContent":["\nconst tagExtractor = (content) => {\n  const DomParser = require(\"dom-parser\");\n  const tagParser = new DomParser();\n  // in pre-processing markdown from Drupal\n  // parse for non-gatsby image, svg, links and tractstack actions\n  const imageTagsParsed = tagParser.parseFromString(content)\n  const imageTags = imageTagsParsed.getElementsByTagName(\"img\")\n  const imageTagsProcessed = [];\n  imageTagsProcessed.forEach(imageTag => {\n      imageTag.attributes.forEach(async (imageTagAttrs) => {\n      if (inlineImageAttrs.name === 'src') {\n        const imageUrl = `https://${imageTagAttrs.value}`;\n        imageTags.push({\n          relativePath: imageTagAttrs.value,\n          remotePath: imageUrl\n        });\n      }\n    })\n  });\n\n  return {\n    contentProcessed: content,\n    imageTagsProcessed: imageTagsProcessed\n  };\n}\n\nconst processMarkdown = (contentRaw) => {\n  var SimpleMarkdown = require(\"simple-markdown\");\n  var mdParse = SimpleMarkdown.defaultBlockParse;\n  var mdOutput = SimpleMarkdown.defaultOutput;\n  var syntaxTree = mdParse(contentRaw);\n  console.log(JSON.stringify(syntaxTree, null, 4));\n  return mdOutput(syntaxTree);\n}\n\nmodule.exports = {\n  tagExtractor,\n  processMarkdown\n}\n"],"file":"helpers.js"}