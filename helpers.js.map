{"version":3,"sources":["src/helpers.js"],"names":["imageTagExtractor","html","regExImageTag","imageTags","content","match","nodes","getNodes","forEach","element","imageTag","slice","imageTagCached","find","file","internal","type","description","includes","console","log","replace","RegExp","relativePath","module","exports"],"mappings":";;AAAA;AAEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AAClC,MAAMC,aAAa,GAAG,oBAAtB,CADkC,CACU;;AAC5C,MAAMC,SAAS,GAAGC,OAAO,CAACC,KAAR,CAAcH,aAAd,CAAlB;;AACA,MAAIC,SAAJ,EAAe;AACX,QAAMG,KAAK,GAAGC,QAAQ,EAAtB;AACAJ,IAAAA,SAAS,CAACK,OAAV,CAAkB,UAACC,OAAD,EAAa;AAC3B,UAAMC,QAAQ,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAjB;AACA,UAAMC,cAAc,GAAGT,SAAS,CAACU,IAAV,CAAe,UAAAC,IAAI;AAAA,eAAKA,IAAI,CAACC,QAAL,CAAcC,IAAd,KAAuB,MAAvB,IAAiCF,IAAI,CAACC,QAAL,CAAcE,WAAd,CAA0BC,QAA1B,CAAmCR,QAAnC,CAAtC;AAAA,OAAnB,CAAvB;;AACA,UAAIE,cAAJ,EAAoB;AAChBO,QAAAA,OAAO,CAACC,GAAR,mBAAuBV,QAAvB;AACAN,QAAAA,OAAO,GAAGA,OAAO,CAACiB,OAAR,CAAgB,IAAIC,MAAJ,CAAWZ,QAAX,EAAqB,GAArB,CAAhB,EAA2CE,cAAc,CAACW,YAA1D,CAAV;AACH;AACJ,KAPD;AAQH;AACF,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACjB;AACEzB,EAAAA,iBAAiB,EAAjBA;AAFe,CAAjB","sourcesContent":["//const DomParser = require(\"dom-parser\");\n\nconst imageTagExtractor = (html) => {\n  const regExImageTag = /\\(\\/sites[^)]+\\)/gi; // from Drupal\n  const imageTags = content.match(regExImageTag);\n  if (imageTags) {\n      const nodes = getNodes();\n      imageTags.forEach((element) => {\n          const imageTag = element.slice(1, -1);\n          const imageTagCached = imageTags.find(file => (file.internal.type === 'File' && file.internal.description.includes(imageTag)));\n          if (imageTagCached) {\n              console.log(`replace ${imageTag}`);\n              content = content.replace(new RegExp(imageTag, 'g'), imageTagCached.relativePath);\n          }\n      });\n  }\n}\n\n/*\nconst tagExtractor = (content) => {\n  const tagParser = new DomParser();\n  // in pre-processing markdown from Drupal\n  // parse for non-gatsby image, svg, links and tractstack actions\n  const imageTagsParsed = tagParser.parseFromString(content)\n  const imageTags = imageTagsParsed.getElementsByTagName(\"img\")\n  const imageTagsProcessed = [];\n  imageTagsProcessed.forEach(imageTag => {\n      imageTag.attributes.forEach(async (imageTagAttrs) => {\n      if (inlineImageAttrs.name === 'src') {\n        const imageUrl = `https://${imageTagAttrs.value}`;\n        imageTags.push({\n          relativePath: imageTagAttrs.value,\n          remotePath: imageUrl\n        });\n      }\n    })\n  });\n\n  return {\n    contentProcessed: content,\n    imageTagsProcessed: imageTagsProcessed\n  };\n}\n*/\n\nmodule.exports = {\n//  tagExtractor,\n  imageTagExtractor\n}\n"],"file":"helpers.js"}